/*
Pulp 3 API

Testing RepositoriesAnsibleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RepositoriesAnsibleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleAddRole(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleCopyCollectionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleCopyCollectionVersion(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleDelete(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleListRoles(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleMark", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleMark(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleModify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleModify(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleMoveCollectionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleMoveCollectionVersion(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleMyPermissions(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsiblePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsiblePartialUpdate(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleRead(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleRebuildMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleRebuildMetadata(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleRemoveRole(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleSign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleSign(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleSync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleSync(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleUnmark", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleUnmark(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleAPIService RepositoriesAnsibleAnsibleUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleAPI.RepositoriesAnsibleAnsibleUpdate(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
