/*
Pulp 3 API

Testing RemotesCollectionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RemotesCollectionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionAddRole(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionDelete(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionListRoles(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionMyPermissions(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionPartialUpdate(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionRead(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionRemoveRole(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesCollectionAPIService RemotesAnsibleCollectionUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleCollectionRemoteHref string

		resp, httpRes, err := apiClient.RemotesCollectionAPI.RemotesAnsibleCollectionUpdate(context.Background(), ansibleCollectionRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
