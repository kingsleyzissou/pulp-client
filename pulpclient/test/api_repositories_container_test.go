/*
Pulp 3 API

Testing RepositoriesContainerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RepositoriesContainerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerAdd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerAdd(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerAddRole(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerBuildImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerBuildImage(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerCopyManifests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerCopyManifests(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerCopyTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerCopyTags(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerDelete(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerListRoles(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerMyPermissions(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerPartialUpdate(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerRead(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerRemove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerRemove(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerRemoveRole(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerSign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerSign(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerSync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerSync(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerTag(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerUntag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerUntag(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerAPIService RepositoriesContainerContainerUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerAPI.RepositoriesContainerContainerUpdate(context.Background(), containerContainerRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
