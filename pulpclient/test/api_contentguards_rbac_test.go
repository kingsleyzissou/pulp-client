/*
Pulp 3 API

Testing ContentguardsRbacAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_ContentguardsRbacAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacAddRole(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacDelete(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacListRoles(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacMyPermissions(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacPartialUpdate(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacRead(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacRemoveRole(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRbacAPIService ContentguardsCoreRbacUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rBACContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRbacAPI.ContentguardsCoreRbacUpdate(context.Background(), rBACContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
