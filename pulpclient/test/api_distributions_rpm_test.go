/*
Pulp 3 API

Testing DistributionsRpmAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_DistributionsRpmAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmAddRole(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmDelete(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmListRoles(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmMyPermissions(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmPartialUpdate(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmRead(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmRemoveRole(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsRpmAPIService DistributionsRpmRpmUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmDistributionHref string

		resp, httpRes, err := apiClient.DistributionsRpmAPI.DistributionsRpmRpmUpdate(context.Background(), rpmRpmDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
