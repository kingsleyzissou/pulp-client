/*
Pulp 3 API

Testing AcsFileAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_AcsFileAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AcsFileAPIService AcsFileFileAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileAddRole(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileDelete(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileListRoles(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileMyPermissions(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFilePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFilePartialUpdate(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileRead(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileRefresh(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileRemoveRole(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AcsFileAPIService AcsFileFileUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileAlternateContentSourceHref string

		resp, httpRes, err := apiClient.AcsFileAPI.AcsFileFileUpdate(context.Background(), fileFileAlternateContentSourceHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
