/*
Pulp 3 API

Testing PublicationsRpmAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_PublicationsRpmAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmPublicationHref string

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmAddRole(context.Background(), rpmRpmPublicationHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmPublicationHref string

		httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmDelete(context.Background(), rpmRpmPublicationHref).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmPublicationHref string

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmListRoles(context.Background(), rpmRpmPublicationHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmPublicationHref string

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmMyPermissions(context.Background(), rpmRpmPublicationHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmPublicationHref string

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmRead(context.Background(), rpmRpmPublicationHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicationsRpmAPIService PublicationsRpmRpmRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmPublicationHref string

		resp, httpRes, err := apiClient.PublicationsRpmAPI.PublicationsRpmRpmRemoveRole(context.Background(), rpmRpmPublicationHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
