/*
Pulp 3 API

Testing RemotesGitAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RemotesGitAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitAddRole(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitDelete(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitListRoles(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitMyPermissions(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitPartialUpdate(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitRead(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitRemoveRole(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGitAPIService RemotesAnsibleGitUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleGitRemoteHref string

		resp, httpRes, err := apiClient.RemotesGitAPI.RemotesAnsibleGitUpdate(context.Background(), ansibleGitRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
