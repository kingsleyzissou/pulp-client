/*
Pulp 3 API

Testing RepositoriesContainerPushAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RepositoriesContainerPushAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushAddRole(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushListRoles(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushMyPermissions(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushPartialUpdate(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushRead(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushRemoveImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushRemoveImage(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushRemoveRole(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushRemoveSignatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushRemoveSignatures(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushSign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushSign(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushTag(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushUntag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushUntag(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesContainerPushAPIService RepositoriesContainerContainerPushUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPushRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesContainerPushAPI.RepositoriesContainerContainerPushUpdate(context.Background(), containerContainerPushRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
