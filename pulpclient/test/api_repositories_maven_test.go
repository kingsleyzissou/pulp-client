/*
Pulp 3 API

Testing RepositoriesMavenAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RepositoriesMavenAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenAddCachedContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mavenMavenRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenAddCachedContent(context.Background(), mavenMavenRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mavenMavenRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenDelete(context.Background(), mavenMavenRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mavenMavenRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenPartialUpdate(context.Background(), mavenMavenRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mavenMavenRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenRead(context.Background(), mavenMavenRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesMavenAPIService RepositoriesMavenMavenUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mavenMavenRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesMavenAPI.RepositoriesMavenMavenUpdate(context.Background(), mavenMavenRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
