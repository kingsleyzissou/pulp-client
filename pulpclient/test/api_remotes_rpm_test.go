/*
Pulp 3 API

Testing RemotesRpmAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RemotesRpmAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmAddRole(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmDelete(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmListRoles(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmMyPermissions(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmPartialUpdate(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmRead(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmRemoveRole(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesRpmAPIService RemotesRpmRpmUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmRpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesRpmAPI.RemotesRpmRpmUpdate(context.Background(), rpmRpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
