/*
Pulp 3 API

Testing RemotesPythonAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/osbuild/pulp-client/pulpclient"
)

func Test_pulpclient_RemotesPythonAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pythonPythonRemoteHref string

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonDelete(context.Background(), pythonPythonRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonFromBandersnatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonFromBandersnatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pythonPythonRemoteHref string

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonPartialUpdate(context.Background(), pythonPythonRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pythonPythonRemoteHref string

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonRead(context.Background(), pythonPythonRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPythonAPIService RemotesPythonPythonUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pythonPythonRemoteHref string

		resp, httpRes, err := apiClient.RemotesPythonAPI.RemotesPythonPythonUpdate(context.Background(), pythonPythonRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
